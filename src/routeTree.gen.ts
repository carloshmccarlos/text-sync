/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TextSyncIdRouteImport } from './routes/text-sync/$id'
import { Route as SitemapXmlRouteImport } from './routes/sitemap.xml'
import { Route as RobotsTxtRouteImport } from './routes/robots.txt'
import { Route as ApiMessagesRouteImport } from './routes/api/messages'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TextSyncIdRoute = TextSyncIdRouteImport.update({
  id: '/text-sync/$id',
  path: '/text-sync/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const SitemapXmlRoute = SitemapXmlRouteImport.update({
  id: '/sitemap/xml',
  path: '/sitemap/xml',
  getParentRoute: () => rootRouteImport,
} as any)
const RobotsTxtRoute = RobotsTxtRouteImport.update({
  id: '/robots/txt',
  path: '/robots/txt',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMessagesRoute = ApiMessagesRouteImport.update({
  id: '/api/messages',
  path: '/api/messages',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/messages': typeof ApiMessagesRoute
  '/robots/txt': typeof RobotsTxtRoute
  '/sitemap/xml': typeof SitemapXmlRoute
  '/text-sync/$id': typeof TextSyncIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/messages': typeof ApiMessagesRoute
  '/robots/txt': typeof RobotsTxtRoute
  '/sitemap/xml': typeof SitemapXmlRoute
  '/text-sync/$id': typeof TextSyncIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/messages': typeof ApiMessagesRoute
  '/robots/txt': typeof RobotsTxtRoute
  '/sitemap/xml': typeof SitemapXmlRoute
  '/text-sync/$id': typeof TextSyncIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/messages'
    | '/robots/txt'
    | '/sitemap/xml'
    | '/text-sync/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api/messages' | '/robots/txt' | '/sitemap/xml' | '/text-sync/$id'
  id:
    | '__root__'
    | '/'
    | '/api/messages'
    | '/robots/txt'
    | '/sitemap/xml'
    | '/text-sync/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiMessagesRoute: typeof ApiMessagesRoute
  RobotsTxtRoute: typeof RobotsTxtRoute
  SitemapXmlRoute: typeof SitemapXmlRoute
  TextSyncIdRoute: typeof TextSyncIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/text-sync/$id': {
      id: '/text-sync/$id'
      path: '/text-sync/$id'
      fullPath: '/text-sync/$id'
      preLoaderRoute: typeof TextSyncIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sitemap/xml': {
      id: '/sitemap/xml'
      path: '/sitemap/xml'
      fullPath: '/sitemap/xml'
      preLoaderRoute: typeof SitemapXmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/robots/txt': {
      id: '/robots/txt'
      path: '/robots/txt'
      fullPath: '/robots/txt'
      preLoaderRoute: typeof RobotsTxtRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/messages': {
      id: '/api/messages'
      path: '/api/messages'
      fullPath: '/api/messages'
      preLoaderRoute: typeof ApiMessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiMessagesRoute: ApiMessagesRoute,
  RobotsTxtRoute: RobotsTxtRoute,
  SitemapXmlRoute: SitemapXmlRoute,
  TextSyncIdRoute: TextSyncIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
